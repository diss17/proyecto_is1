@startuml
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor #f9f9f9
    BorderColor #2a2a2a
    FontName Helvetica
}

' === Clases principales del caso de uso ===
class Hogar {
  id
  nombreContacto
  direccionTexto
  permisosGPS : boolean
}

class Sistema {
  +requerirUbicacion()
  +validarCoordenadas(lat, lng)
  +devolverUbicacion(lat, lng)
  +devolverFallo(tipoError)
}

class ServicioDeGeolocalizacion <<externalService>> {
  +solicitarCoordenadas()
  +devolverCoordenadas(lat, lng)
  +errorServiciosDesactivados()
  +errorPermisosDenegados()
}

class Coordenada {
  lat
  lng
}

class Solicitud {
  id
  fechaHora
  estado
  tipoMaterial
}

' === Relaciones ===
Hogar "1" -- "0..*" Solicitud
Solicitud "1" -- "1" Coordenada
Sistema "1" ..> ServicioDeGeolocalizacion : utiliza >
Sistema "1" -- "0..*" Solicitud : valida >
ServicioDeGeolocalizacion ..> Coordenada : genera >

'Cardinalidades:
'1. Hogar "1" -- "0..*" Solicitud
'Un hogar puede generar muchas solicitudes
'Cada solicitud pertenece a un solo hogar

'2.  Solicitud "1" -- "1" Coordenada 
'Cada solicitud tiene exactamente una coordenada
'Cada coordenada pertenece solo a una solicitud
'Si hay dos solicitudes de la misma direcciÃ³n el modelo crea dos objetos 
'Coordenada distintos, con valores lat y lng iguales

'3. Sistema "1" ..> ServicioDeGeolocalizacion : utiliza >
' Dependencia -> El sistema utiliza un servicio externo para
' obtener las coordenadas

'4. Sistema "1" -- "0..*" Solicitud : valida >
' Un sistema puede validar muchas solicitudes (actua como controlador)
' refleja el DSS

'5. ServicioDeGeolocalizacion ..> Coordenada : genera >
' Dependencia -> genera/retorna coordenadas cuando es invocado
' solo produce

@enduml
